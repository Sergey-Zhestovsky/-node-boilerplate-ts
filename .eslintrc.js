const OFF = 0;
const WARN = 1;
const ERROR = 2;

module.exports = {
  reportUnusedDisableDirectives: true,

  parser: '@typescript-eslint/parser',

  env: {
    'browser': true,
    'commonjs': true,
    'es2021': true,
    'jest/globals': true,
  },

  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'prettier',
    'plugin:jest/recommended',
  ],

  plugins: ['@typescript-eslint', 'jest', 'jsdoc'],

  parserOptions: {
    tsconfigRootDir: __dirname,
    ecmaVersion: 2020,
    sourceType: 'module',
  },

  settings: {
    node: {
      tryExtensions: ['.js', '.json', '.node', '.ts', '.d.ts'],
    },
  },

  rules: {
    'accessor-pairs': OFF,
    'array-bracket-newline': [ERROR, 'consistent'],
    'array-bracket-spacing': [ERROR, 'never'],
    'array-callback-return': ERROR,
    'array-element-newline': [ERROR, 'consistent'],
    'arrow-body-style': OFF, // [ERROR, 'as-needed']
    'arrow-parens': ERROR,
    'arrow-spacing': ERROR,
    'block-spacing': ERROR,
    'brace-style': OFF,
    'camelcase': [ERROR, { ignoreDestructuring: true }],
    'class-methods-use-this': OFF,
    'comma-dangle': [
      ERROR,
      {
        arrays: 'always-multiline',
        objects: 'always-multiline',
        imports: 'always-multiline',
        exports: 'always-multiline',
        functions: 'never',
      },
    ],
    'comma-spacing': ERROR,
    'comma-style': ERROR,
    'computed-property-spacing': ERROR,
    'consistent-return': OFF,
    'curly': [ERROR, 'multi-line'],
    'default-param-last': OFF,
    'dot-location': [ERROR, 'property'],
    'dot-notation': [ERROR, { allowPattern: '^(error|warn)$' }],
    'eol-last': ERROR,
    'eqeqeq': [ERROR, 'allow-null'],
    'func-call-spacing': OFF,
    'function-call-argument-newline': [ERROR, 'consistent'],
    'grouped-accessor-pairs': [ERROR, 'getBeforeSet'],
    'handle-callback-err': [ERROR, '^.*(e|E)rr'],
    'implicit-arrow-linebreak': ERROR,
    'indent': OFF,
    'jsdoc/no-undefined-types': WARN,
    'key-spacing': OFF,
    'keyword-spacing': [ERROR, { after: true, before: true }],
    'linebreak-style': OFF,
    'lines-around-comment': OFF, // [ERROR, { allowBlockEnd: false, allowObjectEnd: false, allowArrayEnd: false, allowClassEnd: false }]
    'lines-between-class-members': OFF,
    'max-classes-per-file': OFF, // [ERROR, 1]
    'max-len': OFF,
    'max-params': [ERROR, 10],
    'max-statements-per-line': ERROR,
    'new-cap': [ERROR, { properties: false }],
    'newline-per-chained-call': [ERROR, { ignoreChainWithDepth: 3 }],
    'no-async-promise-executor': ERROR,
    'no-await-in-loop': ERROR,
    'no-bitwise': OFF,
    'no-buffer-constructor': ERROR,
    'no-compare-neg-zero': ERROR,
    'no-cond-assign': [ERROR, 'except-parens'],
    'no-confusing-arrow': ERROR,
    'no-console': ERROR,
    'no-constant-condition': [ERROR, { checkLoops: false }],
    'no-constructor-return': ERROR,
    'no-duplicate-imports': ERROR,
    'no-else-return': ERROR,
    'no-empty-function': OFF,
    'no-eq-null': ERROR,
    'no-extend-native': ERROR,
    'no-extra-bind': ERROR,
    'no-extra-label': ERROR,
    'no-extra-parens': OFF,
    'no-extra-semi': OFF,
    'no-fallthrough': ERROR,
    'no-floating-decimal': ERROR,
    'no-implied-eval': ERROR,
    'no-inline-comments': OFF,
    'no-inner-declarations': [ERROR, 'functions'],
    'no-invalid-this': OFF,
    'no-iterator': ERROR,
    'no-labels': ERROR,
    'no-lone-blocks': ERROR,
    'no-loop-func': ERROR,
    'no-magic-numbers': OFF,
    'no-mixed-requires': ERROR,
    'no-mixed-spaces-and-tabs': ERROR,
    'no-multi-assign': ERROR,
    'no-multi-spaces': ERROR,
    'no-multiple-empty-lines': ERROR,
    'no-negated-condition': ERROR,
    'no-new': ERROR,
    'no-new-func': ERROR,
    'no-new-require': ERROR,
    'no-new-symbol': ERROR,
    'no-new-wrappers': ERROR,
    'no-octal-escape': ERROR,
    'no-param-reassign': [ERROR, { props: false }],
    'no-path-concat': ERROR,
    'no-process-exit': OFF,
    'no-proto': ERROR,
    'no-restricted-syntax': [ERROR, 'WithStatement'],
    'no-return-assign': [ERROR, 'except-parens'],
    'no-return-await': ERROR,
    'no-self-assign': ERROR,
    'no-self-compare': ERROR,
    'no-shadow': OFF,
    'no-tabs': ERROR,
    'no-throw-literal': OFF,
    'no-trailing-spaces': ERROR,
    'no-undef-init': ERROR,
    'no-undefined': OFF,
    'no-underscore-dangle': ERROR,
    'no-unmodified-loop-condition': ERROR,
    'no-unneeded-ternary': ERROR,
    'no-unused-expressions': OFF,
    'no-unused-vars': OFF,
    'no-use-before-define': OFF,
    'no-useless-call': ERROR,
    'no-useless-computed-key': ERROR,
    'no-useless-concat': ERROR,
    'no-useless-constructor': OFF,
    'no-useless-escape': ERROR,
    'no-useless-rename': ERROR,
    'no-useless-return': ERROR,
    'no-var': ERROR,
    'no-whitespace-before-property': ERROR,
    'object-curly-newline': [ERROR, { consistent: true }],
    'object-curly-spacing': [ERROR, 'always'],
    'operator-linebreak': [ERROR, 'none', { overrides: { '?': 'before', ':': 'before' } }],
    'padded-blocks': [ERROR, 'never'],
    'padding-line-between-statements': [
      ERROR,
      { blankLine: 'always', prev: 'block-like', next: '*' },
      { blankLine: 'always', prev: '*', next: 'block-like' },
      { blankLine: 'always', prev: '*', next: 'case' },
      { blankLine: 'any', prev: 'block-like', next: 'case' },
    ],
    'prefer-const': ERROR,
    'prefer-destructuring': OFF,
    'prefer-named-capture-group': OFF,
    'prefer-object-spread': ERROR,
    'prefer-promise-reject-errors': ERROR,
    'prefer-regex-literals': ERROR,
    'prefer-rest-params': ERROR,
    'prefer-spread': ERROR,
    'prefer-template': ERROR,
    'quote-props': [ERROR, 'consistent'],
    'quotes': OFF,
    'require-await': OFF,
    'rest-spread-spacing': ERROR,
    'semi': OFF,
    'semi-spacing': ERROR,
    'semi-style': ERROR,
    'space-before-blocks': ERROR,
    'space-before-function-paren': OFF,
    'space-in-parens': ERROR,
    'space-infix-ops': ERROR,
    'space-unary-ops': [ERROR, { words: true, nonwords: false }],
    'spaced-comment': [ERROR, 'always', { markers: ['/'] }],
    'symbol-description': ERROR,
    'template-curly-spacing': ERROR,
    'valid-typeof': [ERROR, { requireStringLiterals: true }],
    'yoda': ERROR,
  },

  overrides: [
    {
      files: ['**/*.js'],
      extends: ['plugin:node/recommended-script'],
      rules: {
        '@typescript-eslint/no-var-requires': OFF,
        '@typescript-eslint/no-require-imports': OFF,
        '@typescript-eslint/no-unsafe-call': OFF,
        '@typescript-eslint/no-unsafe-return': OFF,
        'no-process-exit': OFF,
      },
    },
    {
      files: ['*.ts'],
      parserOptions: {
        project: ['./tsconfig.json'],
      },
      extends: ['plugin:node/recommended-module'],
      rules: {
        'no-process-exit': OFF,

        'node/no-extraneous-import': OFF,
        'node/no-missing-import': OFF,
        'node/no-unpublished-import': OFF,

        '@typescript-eslint/adjacent-overload-signatures': ERROR,
        '@typescript-eslint/array-type': [
          ERROR,
          {
            default: 'array-simple',
          },
        ],
        '@typescript-eslint/await-thenable': ERROR,
        '@typescript-eslint/ban-ts-comment': [
          ERROR,
          {
            'ts-ignore': 'allow-with-description',
          },
        ],
        '@typescript-eslint/ban-ts-ignore': OFF,
        '@typescript-eslint/ban-types': [
          'error',
          {
            types: {
              'String': {
                message: 'Use string instead',
                fixWith: 'string',
              },
              '{}': {
                message: 'Use object instead',
                fixWith: 'object',
              },
              'object': false,
            },
          },
        ],
        '@typescript-eslint/brace-style': [ERROR, '1tbs'],
        '@typescript-eslint/camelcase': OFF,
        '@typescript-eslint/comma-spacing': [ERROR],
        '@typescript-eslint/consistent-type-assertions': [
          ERROR,
          {
            assertionStyle: 'as',
            objectLiteralTypeAssertions: 'allow-as-parameter',
          },
        ],
        '@typescript-eslint/consistent-type-definitions': [ERROR, 'interface'],
        '@typescript-eslint/default-param-last': [ERROR],
        '@typescript-eslint/explicit-function-return-type': OFF,
        '@typescript-eslint/explicit-member-accessibility': [
          ERROR,
          {
            accessibility: 'no-public',
            overrides: {
              accessors: 'off',
              constructors: 'off',
              methods: 'off',
              properties: 'explicit',
              parameterProperties: 'explicit',
            },
          },
        ],
        '@typescript-eslint/explicit-module-boundary-types': OFF,
        '@typescript-eslint/func-call-spacing': [ERROR, 'never'],
        '@typescript-eslint/indent': OFF,
        '@typescript-eslint/lines-between-class-members': [
          ERROR,
          {
            exceptAfterSingleLine: true,
          },
        ],
        '@typescript-eslint/member-delimiter-style': ERROR,
        '@typescript-eslint/member-naming': OFF,
        '@typescript-eslint/member-ordering': [
          ERROR,
          {
            default: [
              'signature',
              'static-field',
              'static-method',
              'decorated-field',
              'abstract-field',
              'instance-field',
              'constructor',
              'decorated-method',
              'abstract-method',
              'instance-method',
            ],
          },
        ],
        '@typescript-eslint/naming-convention': [
          ERROR,
          {
            selector: 'interface',
            format: ['PascalCase'],
            prefix: ['I'],
          },
          {
            selector: 'enum',
            format: ['PascalCase'],
            prefix: ['E'],
          },
          {
            selector: ['typeAlias'],
            format: ['PascalCase'],
            prefix: ['T'],
          },
          {
            selector: 'variable',
            types: ['function'],
            format: ['camelCase'],
          },
          {
            selector: 'class',
            format: ['PascalCase'],
          },
          {
            selector: 'parameter',
            format: ['camelCase', 'PascalCase'],
            filter: { regex: '^_+$', match: false },
          },
          {
            selector: 'method',
            format: ['camelCase', 'PascalCase'],
          },
          {
            selector: 'enumMember',
            format: ['PascalCase'],
          },
          {
            selector: 'typeParameter',
            format: ['PascalCase'],
          },
        ],
        '@typescript-eslint/no-array-constructor': ERROR,
        '@typescript-eslint/no-base-to-string': ERROR,
        '@typescript-eslint/no-dupe-class-members': ERROR,
        '@typescript-eslint/no-dynamic-delete': ERROR,
        '@typescript-eslint/no-empty-function': WARN,
        '@typescript-eslint/no-empty-interface': [
          ERROR,
          {
            allowSingleExtends: true,
          },
        ],
        '@typescript-eslint/no-explicit-any': [
          ERROR,
          {
            ignoreRestArgs: true,
          },
        ],
        '@typescript-eslint/no-extra-non-null-assertion': ERROR,
        '@typescript-eslint/no-extra-parens': OFF,
        '@typescript-eslint/no-extra-semi': ERROR,
        '@typescript-eslint/no-extraneous-class': OFF,
        '@typescript-eslint/no-floating-promises': [
          ERROR,
          {
            ignoreVoid: true,
            ignoreIIFE: true,
          },
        ],
        '@typescript-eslint/no-for-in-array': ERROR,
        '@typescript-eslint/no-inferrable-types': OFF,
        '@typescript-eslint/no-misused-new': ERROR,
        '@typescript-eslint/no-misused-promises': [
          ERROR,
          {
            checksConditionals: false,
            checksVoidReturn: false,
          },
        ],
        '@typescript-eslint/no-namespace': ERROR,
        '@typescript-eslint/no-non-null-asserted-optional-chain': ERROR,
        '@typescript-eslint/no-non-null-assertion': ERROR,
        '@typescript-eslint/no-parameter-properties': OFF,
        '@typescript-eslint/no-require-imports': ERROR,
        '@typescript-eslint/no-shadow': ERROR,
        '@typescript-eslint/no-this-alias': ERROR,
        '@typescript-eslint/no-throw-literal': ERROR,
        '@typescript-eslint/no-type-alias': OFF,
        '@typescript-eslint/no-unnecessary-boolean-literal-compare': ERROR,
        '@typescript-eslint/no-unnecessary-condition': [
          ERROR,
          {
            allowConstantLoopConditions: true,
          },
        ],
        '@typescript-eslint/no-unnecessary-qualifier': ERROR,
        '@typescript-eslint/no-unnecessary-type-arguments': OFF,
        '@typescript-eslint/no-unnecessary-type-assertion': ERROR,
        '@typescript-eslint/no-unsafe-call': ERROR,
        '@typescript-eslint/no-unsafe-member-access': ERROR,
        '@typescript-eslint/no-unsafe-return': ERROR,
        '@typescript-eslint/no-untyped-public-signature': OFF,
        '@typescript-eslint/no-unused-expressions': [
          ERROR,
          {
            allowShortCircuit: true,
            allowTernary: true,
            allowTaggedTemplates: true,
          },
        ],
        '@typescript-eslint/no-unused-vars': [ERROR, { args: 'none' }],
        '@typescript-eslint/no-unused-vars-experimental': OFF,
        '@typescript-eslint/no-use-before-define': ERROR,
        '@typescript-eslint/no-useless-constructor': OFF,
        '@typescript-eslint/no-var-requires': OFF,
        '@typescript-eslint/prefer-as-const': ERROR,
        '@typescript-eslint/prefer-for-of': ERROR,
        '@typescript-eslint/prefer-function-type': ERROR,
        '@typescript-eslint/prefer-includes': ERROR,
        '@typescript-eslint/prefer-namespace-keyword': ERROR,
        '@typescript-eslint/prefer-nullish-coalescing': [
          ERROR,
          {
            ignoreMixedLogicalExpressions: true,
            ignoreConditionalTests: true,
          },
        ],
        '@typescript-eslint/prefer-optional-chain': ERROR,
        '@typescript-eslint/prefer-readonly': ERROR,
        '@typescript-eslint/prefer-readonly-parameter-types': OFF,
        '@typescript-eslint/prefer-regexp-exec': OFF,
        '@typescript-eslint/prefer-string-starts-ends-with': ERROR,
        '@typescript-eslint/promise-function-async': ERROR,
        '@typescript-eslint/quotes': [
          WARN,
          'single',
          {
            avoidEscape: true,
            allowTemplateLiterals: true,
          },
        ],
        '@typescript-eslint/require-array-sort-compare': ERROR,
        '@typescript-eslint/require-await': OFF,
        '@typescript-eslint/restrict-plus-operands': ERROR,
        '@typescript-eslint/restrict-template-expressions': [
          ERROR,
          {
            allowNumber: true,
            allowBoolean: true,
            allowNullable: true,
            allowAny: true,
          },
        ],
        '@typescript-eslint/semi': ERROR,
        '@typescript-eslint/space-before-function-paren': [
          ERROR,
          {
            anonymous: 'always',
            named: 'never',
            asyncArrow: 'always',
          },
        ],
        '@typescript-eslint/strict-boolean-expressions': OFF,
        '@typescript-eslint/switch-exhaustiveness-check': ERROR,
        '@typescript-eslint/triple-slash-reference': ERROR,
        '@typescript-eslint/type-annotation-spacing': ERROR,
        '@typescript-eslint/typedef': OFF,
        '@typescript-eslint/unbound-method': OFF,
        '@typescript-eslint/unified-signatures': ERROR,
      },
    },
    {
      files: ['**/*.test.js', 'src/scripts/*', '**/*.test.ts'],
      rules: {
        'node/no-unpublished-require': OFF,
        'node/no-missing-require': OFF,
        '@typescript-eslint/no-non-null-assertion': OFF,
        '@typescript-eslint/no-explicit-any': OFF,
      },
    },
  ],
};
