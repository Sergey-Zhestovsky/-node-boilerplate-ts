const OFF = 0;
const WARN = 1;
const ERROR = 2;

module.exports = {
  reportUnusedDisableDirectives: true,

  parser: '@typescript-eslint/parser',

  env: {
    'browser': true,
    'commonjs': true,
    'es2021': true,
    'jest/globals': true,
  },

  extends: [
    'plugin:@typescript-eslint/recommended',
    'plugin:node/recommended',
    'prettier',
    'plugin:jest/recommended',
  ],

  plugins: ['@typescript-eslint', 'jest', 'jsdoc'],

  parserOptions: {
    tsconfigRootDir: __dirname,
    project: ['./tsconfig.json'],
    ecmaVersion: 2020,
    sourceType: 'module',
  },

  rules: {
    'accessor-pairs': OFF,
    'array-bracket-newline': [ERROR, 'consistent'],
    'array-bracket-spacing': [ERROR, 'never'],
    'array-callback-return': ERROR,
    'array-element-newline': [ERROR, 'consistent'],
    'arrow-body-style': OFF, // [ERROR, 'as-needed']
    'arrow-parens': ERROR,
    'arrow-spacing': ERROR,
    'block-spacing': ERROR,
    'brace-style': OFF,
    'camelcase': [ERROR, { ignoreDestructuring: true }],
    'class-methods-use-this': OFF,
    'comma-dangle': [
      ERROR,
      {
        arrays: 'always-multiline',
        objects: 'always-multiline',
        imports: 'always-multiline',
        exports: 'always-multiline',
        functions: 'never',
      },
    ],
    'comma-spacing': ERROR,
    'comma-style': ERROR,
    'computed-property-spacing': ERROR,
    'consistent-return': OFF,
    'curly': [ERROR, 'multi-line'],
    'default-param-last': OFF,
    'dot-location': [ERROR, 'property'],
    'dot-notation': [ERROR, { allowPattern: '^(error|warn)$' }],
    'eol-last': ERROR,
    'eqeqeq': [ERROR, 'allow-null'],
    'func-call-spacing': OFF,
    'function-call-argument-newline': [ERROR, 'consistent'],
    'grouped-accessor-pairs': [ERROR, 'getBeforeSet'],
    'handle-callback-err': [ERROR, '^.*(e|E)rr'],
    'implicit-arrow-linebreak': ERROR,
    'indent': OFF,
    'jsdoc/no-undefined-types': WARN,
    'key-spacing': OFF,
    'keyword-spacing': [ERROR, { after: true, before: true }],
    'linebreak-style': ERROR,
    'lines-around-comment': OFF, // [ERROR, { allowBlockEnd: false, allowObjectEnd: false, allowArrayEnd: false, allowClassEnd: false }]
    'lines-between-class-members': ERROR,
    'max-classes-per-file': OFF, // [ERROR, 1]
    'max-len': OFF,
    'max-params': [ERROR, 10],
    'max-statements-per-line': ERROR,
    'new-cap': [ERROR, { properties: false }],
    'newline-per-chained-call': [ERROR, { ignoreChainWithDepth: 3 }],
    'no-async-promise-executor': ERROR,
    'no-await-in-loop': ERROR,
    'no-bitwise': OFF,
    'no-buffer-constructor': ERROR,
    'no-compare-neg-zero': ERROR,
    'no-cond-assign': [ERROR, 'except-parens'],
    'no-confusing-arrow': ERROR,
    'no-console': ERROR,
    'no-constant-condition': [ERROR, { checkLoops: false }],
    'no-constructor-return': ERROR,
    'no-duplicate-imports': ERROR,
    'no-else-return': ERROR,
    'no-empty-function': OFF,
    'no-eq-null': ERROR,
    'no-extend-native': ERROR,
    'no-extra-bind': ERROR,
    'no-extra-label': ERROR,
    'no-extra-parens': OFF,
    'no-extra-semi': ERROR,
    'no-fallthrough': ERROR,
    'no-floating-decimal': ERROR,
    'no-implied-eval': ERROR,
    'no-inline-comments': OFF,
    'no-inner-declarations': [ERROR, 'functions'],
    'no-invalid-this': OFF,
    'no-iterator': ERROR,
    'no-labels': ERROR,
    'no-lone-blocks': ERROR,
    'no-loop-func': ERROR,
    'no-magic-numbers': OFF,
    'no-mixed-requires': ERROR,
    'no-mixed-spaces-and-tabs': ERROR,
    'no-multi-assign': ERROR,
    'no-multi-spaces': ERROR,
    'no-multiple-empty-lines': ERROR,
    'no-negated-condition': ERROR,
    'no-new': ERROR,
    'no-new-func': ERROR,
    'no-new-require': ERROR,
    'no-new-symbol': ERROR,
    'no-new-wrappers': ERROR,
    'no-octal-escape': ERROR,
    'no-param-reassign': [ERROR, { props: false }],
    'no-path-concat': ERROR,
    'no-process-exit': OFF,
    'no-proto': ERROR,
    'no-restricted-syntax': [ERROR, 'WithStatement'],
    'no-return-assign': [ERROR, 'except-parens'],
    'no-return-await': ERROR,
    'no-self-assign': ERROR,
    'no-self-compare': ERROR,
    'no-shadow': WARN,
    'no-tabs': ERROR,
    'no-throw-literal': OFF,
    'no-trailing-spaces': ERROR,
    'no-undef-init': ERROR,
    'no-undefined': OFF,
    'no-underscore-dangle': ERROR,
    'no-unmodified-loop-condition': ERROR,
    'no-unneeded-ternary': ERROR,
    'no-unused-expressions': ERROR,
    'no-unused-vars': [ERROR, { args: 'none' }],
    'no-use-before-define': ERROR,
    'no-useless-call': ERROR,
    'no-useless-computed-key': ERROR,
    'no-useless-concat': ERROR,
    'no-useless-constructor': OFF,
    'no-useless-escape': ERROR,
    'no-useless-rename': ERROR,
    'no-useless-return': ERROR,
    'no-var': ERROR,
    'no-whitespace-before-property': ERROR,
    'object-curly-newline': [ERROR, { consistent: true }],
    'object-curly-spacing': [ERROR, 'always'],
    'operator-linebreak': [ERROR, 'none', { overrides: { '?': 'before', ':': 'before' } }],
    'padded-blocks': [ERROR, 'never'],
    'padding-line-between-statements': [
      ERROR,
      { blankLine: 'always', prev: 'block-like', next: '*' },
      { blankLine: 'always', prev: '*', next: 'block-like' },
      { blankLine: 'always', prev: '*', next: 'case' },
      { blankLine: 'any', prev: 'block-like', next: 'case' },
    ],
    'prefer-const': ERROR,
    'prefer-destructuring': OFF,
    'prefer-named-capture-group': OFF,
    'prefer-object-spread': ERROR,
    'prefer-promise-reject-errors': ERROR,
    'prefer-regex-literals': ERROR,
    'prefer-rest-params': ERROR,
    'prefer-spread': ERROR,
    'prefer-template': ERROR,
    'quote-props': [ERROR, 'consistent'],
    'quotes': [WARN, 'single', { avoidEscape: true, allowTemplateLiterals: true }],
    'require-await': OFF,
    'rest-spread-spacing': ERROR,
    'semi': ERROR,
    'semi-spacing': ERROR,
    'semi-style': ERROR,
    'space-before-blocks': ERROR,
    'space-before-function-paren': OFF,
    'space-in-parens': ERROR,
    'space-infix-ops': ERROR,
    'space-unary-ops': [ERROR, { words: true, nonwords: false }],
    'spaced-comment': [ERROR, 'always', { markers: ['/'] }],
    'symbol-description': ERROR,
    'template-curly-spacing': ERROR,
    'valid-typeof': [ERROR, { requireStringLiterals: true }],
    'yoda': ERROR,

    '@typescript-eslint/adjacent-overload-signatures': ERROR,
    '@typescript-eslint/array-type': [ERROR, { default: 'generic' }],
    '@typescript-eslint/await-thenable': ERROR,
    '@typescript-eslint/ban-ts-comment': WARN,
    '@typescript-eslint/ban-ts-ignore': OFF,
    '@typescript-eslint/ban-types': [
      'error',
      {
        types: {
          'String': {
            message: 'Use string instead',
            fixWith: 'string',
          },
          '{}': {
            message: 'Use object instead',
            fixWith: 'object',
          },
        },
      },
    ],
    '@typescript-eslint/brace-style': [ERROR, '1tbs'],
    '@typescript-eslint/camelcase': OFF,
    '@typescript-eslint/comma-spacing': [ERROR],
    '@typescript-eslint/consistent-type-assertions': [
      ERROR,
      {
        assertionStyle: 'as',
        objectLiteralTypeAssertions: 'allow-as-parameter',
      },
    ],
    '@typescript-eslint/consistent-type-definitions': [ERROR, 'interface'],
    '@typescript-eslint/default-param-last': [ERROR],
    '@typescript-eslint/explicit-function-return-type': OFF,
    '@typescript-eslint/explicit-member-accessibility': [ERROR, { accessibility: 'no-public' }],
    '@typescript-eslint/explicit-module-boundary-types': OFF,
    '@typescript-eslint/func-call-spacing': [ERROR, 'never'],
    '@typescript-eslint/indent': [ERROR, 2],
    '@typescript-eslint/member-delimiter-style': ERROR,
    '@typescript-eslint/member-naming': OFF,
    '@typescript-eslint/member-ordering': [
      ERROR,
      {
        default: [
          'signature',

          'static-field',
          'static-method',

          'decorated-field',
          'abstract-field',
          'instance-field',

          'constructor',

          'decorated-method',
          'abstract-method',
          'instance-method',
        ],
      },
    ],
    '@typescript-eslint/naming-convention': [
      ERROR,
      {
        selector: 'default',
        format: ['camelCase'],
      },
      {
        selector: 'interface',
        format: ['PascalCase'],
        prefix: ['I'],
      },
      {
        selector: 'enum',
        format: ['PascalCase'],
        prefix: ['E'],
      },
      {
        selector: ['typeAlias', 'typeParameter'],
        format: ['PascalCase'],
        prefix: ['T'],
      },
      {
        selector: 'variable',
        format: ['camelCase', 'UPPER_CASE'],
      },
      {
        selector: 'variable',
        types: ['function'],
        format: ['camelCase'],
      },
      {
        selector: 'objectLiteralProperty',
        format: ['PascalCase', 'camelCase', 'snake_case', 'UPPER_CASE'],
      },
      {
        selector: 'class',
        format: ['PascalCase'],
      },
      {
        selector: 'parameter',
        format: ['camelCase'],
      },
      {
        selector: 'method',
        format: ['camelCase'],
      },
      {
        selector: 'enumMember',
        format: ['PascalCase'],
      },
    ],
    '@typescript-eslint/no-array-constructor': ERROR,
    '@typescript-eslint/no-base-to-string': ERROR,
    '@typescript-eslint/no-dupe-class-members': ERROR,
    '@typescript-eslint/no-dynamic-delete': ERROR,
    '@typescript-eslint/no-empty-function': WARN,
    '@typescript-eslint/no-empty-interface': [ERROR, { allowSingleExtends: true }],
    '@typescript-eslint/no-explicit-any': ERROR,
    '@typescript-eslint/no-extra-non-null-assertion': ERROR,
    '@typescript-eslint/no-extra-parens': OFF,
    '@typescript-eslint/no-extra-semi': ERROR,
    '@typescript-eslint/no-extraneous-class': OFF,
    '@typescript-eslint/no-floating-promises': [ERROR, { ignoreVoid: true, ignoreIIFE: true }],
    '@typescript-eslint/no-for-in-array': ERROR,
    '@typescript-eslint/no-inferrable-types': OFF,
    '@typescript-eslint/no-misused-new': ERROR,
    '@typescript-eslint/no-misused-promises': [
      'error',
      { checksConditionals: false, checksVoidReturn: false },
    ],
    '@typescript-eslint/no-namespace': ERROR,
    '@typescript-eslint/no-non-null-asserted-optional-chain': ERROR,
    '@typescript-eslint/no-non-null-assertion': ERROR,
    '@typescript-eslint/no-parameter-properties': OFF,
    '@typescript-eslint/no-require-imports': ERROR,
    '@typescript-eslint/no-this-alias': ERROR,
    '@typescript-eslint/no-throw-literal': ERROR,
    '@typescript-eslint/no-type-alias': OFF,
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
    '@typescript-eslint/no-unnecessary-qualifier': 'error',
    '@typescript-eslint/no-unnecessary-type-arguments': 'error',
    '@typescript-eslint/no-unnecessary-type-assertion': 'error',
    '@typescript-eslint/no-unsafe-call': 'off',
    '@typescript-eslint/no-unsafe-member-access': 'off',
    '@typescript-eslint/no-unsafe-return': 'off',
    '@typescript-eslint/no-untyped-public-signature': 'off',
    '@typescript-eslint/no-unused-vars-experimental': [
      'error',
      {
        ignoreArgsIfArgsAfterAreUsed: true,
      },
    ],
    '@typescript-eslint/no-unused-expressions': [
      'error',
      {
        allowShortCircuit: true,
      },
    ],
    '@typescript-eslint/no-unused-vars': 'off',
    '@typescript-eslint/no-use-before-define': 'error',
    '@typescript-eslint/no-useless-constructor': 'error',
    '@typescript-eslint/no-var-requires': 'error',
    '@typescript-eslint/prefer-as-const': 'error',
    '@typescript-eslint/prefer-for-of': 'error',
    '@typescript-eslint/prefer-function-type': 'error',
    '@typescript-eslint/prefer-includes': 'error',
    '@typescript-eslint/prefer-namespace-keyword': 'error',
    '@typescript-eslint/prefer-optional-chain': 'error',
    '@typescript-eslint/prefer-readonly-parameter-types': 'off',
    '@typescript-eslint/prefer-readonly': 'off',
    '@typescript-eslint/prefer-regexp-exec': 'error',
    '@typescript-eslint/prefer-string-starts-ends-with': 'error',
    '@typescript-eslint/promise-function-async': 'off',
    '@typescript-eslint/require-array-sort-compare': 'error',
    '@typescript-eslint/require-await': 'off',
    '@typescript-eslint/restrict-plus-operands': 'error',
    '@typescript-eslint/semi': ['error', 'always'],
    '@typescript-eslint/strict-boolean-expressions': 'off',
    '@typescript-eslint/switch-exhaustiveness-check': 'error',
    '@typescript-eslint/unified-signatures': 'error',
    '@typescript-eslint/triple-slash-reference': 'error',
    '@typescript-eslint/type-annotation-spacing': 'error',
    '@typescript-eslint/typedef': 'off',
    '@typescript-eslint/unbound-method': 'off',
    '@typescript-eslint/space-before-function-paren': [
      'error',
      {
        anonymous: 'never',
        named: 'never',
        asyncArrow: 'always',
      },
    ],
    '@typescript-eslint/restrict-template-expressions': [
      'off',
      {
        allowNumber: true,
        allowBoolean: true,
        allowNullable: true,
        allowAny: true,
      },
    ],
    '@typescript-eslint/quotes': [
      'error',
      'single',
      {
        avoidEscape: true,
      },
    ],
    '@typescript-eslint/prefer-nullish-coalescing': [
      'off',
      {
        ignoreMixedLogicalExpressions: true,
        ignoreConditionalTests: true,
      },
    ],
    '@typescript-eslint/no-unnecessary-condition': [
      'off',
      {
        ignoreRhs: true,
      },
    ],
  },

  overrides: [
    {
      files: ['**/*.test.js', 'src/scripts/*'],
      rules: {
        'node/no-unpublished-require': OFF,
        'node/no-missing-require': OFF,
      },
    },
  ],
};
